import { NextApiRequest, NextApiResponse } from "next";
import { sendCode } from "../../../controllers/auth";
import { sendEmail } from "../../../lib/mailjet";

export default async function (req: NextApiRequest, res: NextApiResponse) {

    const auth = await sendCode(req.body.email)

    // email sender comentado pero funcionando游땔
    // const sendEmailRes = await sendEmail(auth.data)

    res.send(auth.data)
}

// los endpoints s칩lo reciben y checkean las req y querys
// siempre la salida del endpoint tiene que ser predecible
// no tiene que hacer nada mas que recibir userId

// delegar el resto a un controller que es la siguiente capa
// los controllers son un mont칩n de funciones o una clase con funciones
// la mayor칤a de los endpoints deber칤an delegar todo a los controllers

// la 칰ltima capa son los models
// son o clases o funciones, mejor es una clase
// porque se representa como un registro de la db
// es m치s f치cil de manipular la data
// se puede usar fireorm
// nos deja hacer abstracciones mucho mas facilmente
// s칩lo esta es la capa que se comunica con la db
// el controller no tiene que saber sobre el db
// el controller tiene que decir "dame un user", "dame un producto",
// "compar치 esto", "guard치 este user", "modific치 esto"
// si se respetan las capas, es mas f치cil detectar errores
// lib no pertenece al sistema de capas


// si puedo escribir hasta donde llegan las responsabilidades
// de cada capa, y d칤a a d칤a ir agregando detalles sobre cada capa
// vamos a ir ejercitando y mejorando nuestras habilidades de arquitectura
